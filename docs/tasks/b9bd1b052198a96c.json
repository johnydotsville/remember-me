{
  "id": "b9bd1b052198a96c",
  "name": "task-greet-user-refactoring",
  "path": "tasks\\javascript\\destruction\\task-greet-user-refactoring",
  "title": "Рефакторинг функции приветствия",
  "description": "Вам на почту пришло задание от тимлида. В письме он просит вас отрефакторить вот эту функцию:\r\n\r\n```javascript\r\nfunction greetUser(userCorporateProfile) {\r\n  return `Hello, ${userCorporateProfile.firstname} ${userCorporateProfile.lastname}!`;\r\n}\r\n```\r\n\r\nЕму не нравятся эти избыточные обращения через точку, надо как-то сократить, не меняя само название параметра.\r\n\r\nЗадание:\r\n\r\n* Пожелания от тимлида: \"вынеси эти поля в отдельные переменные с такими же названиями\".\r\n* UPD. После первого рефакторинга тимлиду теперь кажется, что имена переменных душные. \"Пусть будет просто name и surname\" - написал он.\r\n* UPD. \"Они там с ума сошли. Теперь пользователь может быть без имени и фамилии. Сделай на этот случай какие-нибудь заглушки вместо значений. Например, 'dear' и 'user'\".\r\n* UPD. \"Они поменяли формат данных. Теперь объект пользователя выглядит вот так (плюс учти, что personality вообще могут не передать, надо чтобы программа не падала при этом):\"\r\n\r\n```javascript\r\nconst user = {\r\n  personality: {\r\n    firstname: 'Dave',\r\n    lastname: 'Hoff',\r\n  },\r\n  department: 'development'\r\n}\r\n```\r\n\r\n* UPD. \"Я ушиб палец и пока он заживает, мне трудно печатать. Я уже объявил переменные, которые я могу набирать одной рукой, а ты положи в них данные\":\r\n\r\n```javascript\r\nfunction greetUser(userCorporateProfile) {\r\n  let fn, ln;\r\n  // Положи firstname и lastname в мои переменные\r\n  return `Hello, ${fn} ${ln}!`;\r\n}\r\n```\r\n\r\n* UPD. \"Они напихали в объект еще всякой ерунды. Пока она нам не нужна, но кто знает, что будет дальше? Так что собери все неиспользуемые поля в отдельный объект и пусть там валяются.\"\r\n\r\n```javascript\r\nconst user = {\r\n  personality: {\r\n    firstname: 'Dave',\r\n    lastname: 'Hoff',\r\n  },\r\n  department: 'development',\r\n  zodiac: 'Aquarius',\r\n  allergy: ['fish', 'milk'],\r\n  likeThisMusic: ['jazz', 'classic']\r\n}\r\n```\r\n\r\n* UPD. \"Я вижу ты неплох в деструктуризации. Напиши мне функцию printCustomFieldValue(user, prop), в которую я смогу передать объект юзера и поле. Функция должна печатать в консоль значение этого поля. Значение извлеки через деструктуризацию, раз уж она тебе так нравится\".",
  "template": "function greetUser(userCorporateProfile) {\r\n  return `Hello, \\${userCorporateProfile.firstname} \\${userCorporateProfile.lastname}!`;\r\n}\r\n\r\nconst user = {\r\n  firstname: 'Dave',\r\n  lastname: 'Hoff',\r\n  department: 'development'\r\n}\r\n\r\nconsole.log(greetUser(user));",
  "solution": "// Пожелание 1: поля в переменные с такими же названиями\r\nfunction greetUser(userCorporateProfile) {\r\n  const { firstname, lastname } = userCorporateProfile;\r\n  return `Hello, \\${firstname} \\${lastname}!`;\r\n}\r\n\r\n// Пожелание 2: поля в переменные с другими именами\r\nfunction greetUser(userCorporateProfile) {\r\n  const { firstname: name, lastname: surname } = userCorporateProfile;\r\n  return `Hello, \\${name} \\${surname}!`;\r\n}\r\n\r\n// Пожелание 3: когда имя и фамилия не заданы\r\nfunction greetUser(userCorporateProfile) {\r\n  const { firstname: name = 'dear', lastname: surname = 'user' } = userCorporateProfile;\r\n  return `Hello, \\${name} \\${surname}!`;\r\n}\r\n\r\n// Пожелание 4: изменили структуру исходного объекта, теперь поля вложены\r\nfunction greetUser(userCorporateProfile) {\r\n  const { \r\n    personality: {\r\n      firstname: name = 'dear', \r\n      lastname: surname = 'user' \r\n    } = {}\r\n  } = userCorporateProfile;\r\n  return `Hello, \\${name} \\${surname}!`;\r\n}\r\n\r\n// Пожелание 5: деструктурировать в заранее объявленные переменные\r\nfunction greetUser(userCorporateProfile) {\r\n  let fn, ln;\r\n  ({ \r\n    personality: {\r\n      firstname: fn = 'dear', \r\n      lastname: ln = 'user' \r\n    } = {}\r\n  } = userCorporateProfile);\r\n  return `Hello, \\${fn} \\${ln}!`;\r\n}\r\n\r\n// Пожелание 6: собрать все не нужные пока что поля в отдельный объект\r\nfunction greetUser(userCorporateProfile) {\r\n  const { \r\n    personality: {\r\n      firstname: fn = 'dear', \r\n      lastname: ln = 'user' \r\n    } = {},\r\n    ...noNeed\r\n  } = userCorporateProfile;\r\n  return `Hello, \\${fn} \\${ln}!`;\r\n}\r\n\r\n// Пожелание 7: функция распечатки указанного свойства\r\n// TOOD: а что, если поле вложенное? firstname внутри personality например.\r\nfunction printCustomFieldValue(user, prop) {\r\n  const { [prop]: result } = user;\r\n  console.log(result);\r\n}",
  "templateLang": ".ts",
  "solutionLang": ".ts",
  "categories": [
    "javascript",
    "destruction"
  ],
  "tags": [
    "деструктуризация объектов",
    "деструктуризация",
    "деструктурирующее присваивание",
    "javascript"
  ]
}