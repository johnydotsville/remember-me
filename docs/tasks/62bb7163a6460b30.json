{
  "id": "62bb7163a6460b30",
  "name": "task-fetch-to-ent",
  "path": "tasks\\refactoring\\task-fetch-to-ent",
  "title": "Свободный рефакторинг",
  "description": "### Вводные\r\n\r\nОтрефакторить указанную функцию, чтобы она больше походила на промышленное решение. Ограничений нет, рефакторить на сколько хватит фантазии. Приведенное решение - просто ориентир, а не идеал.",
  "template": "async function fetchData(page, limit) {\r\n  const params = new URLSearchParams();\r\n  params.append('_page', page.toString());\r\n  params.append('_limit', limit.toString());\r\n\r\n  const endpoint = 'https://jsonplaceholder.typicode.com/posts';\r\n  const url = new URL(endpoint);\r\n  url.search = params.toString();\r\n\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n  data.forEach(p =>console.log(p.title));\r\n}\r\n\r\nfetchData(5, 3);",
  "solution": "async function fetchData(baseUrl, page, limit) {\r\n  try {\r\n    const url = new URL(baseUrl);\r\n    url.searchParams.append('_page', String(page));\r\n    url.searchParams.append('_limit', String(limit));\r\n\r\n    const response = await fetch(url);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Ошибка выбора данных. HTTP-status: \\${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function show() {\r\n  const endpoint = 'https://jsonplaceholder.typicode.com/posts';\r\n  const data = await fetchData(endpoint, 5, 10);\r\n\r\n  if (!data || !Array.isArray(data)) {\r\n    throw new Error(`Ожидался массив, а получено \\${typeof data}`)\r\n  }\r\n\r\n  data.forEach(p => {\r\n    if (p?.title) {\r\n      console.log(p.title)\r\n    }\r\n  });\r\n}\r\n\r\nshow();",
  "templateLang": ".ts",
  "solutionLang": ".ts",
  "categories": [
    "refactoring"
  ],
  "tags": []
}