{
  "id": "638e45f68ebc2596",
  "name": "task-magic-numbers-test_grid_basics",
  "path": "tasks\\css\\grid\\task-magic-numbers-test_grid_basics",
  "title": "Тест магических чисел",
  "description": "В вашем отделе проводят конкурс на спонтанный скилл по CSS. Участник садится за компьютер, а все собравшиеся вокруг коллеги выкрикивают задание. Победитель получает купон на 10 бесплатных чашек мажорного чая в офисном кафе. Дошла очередь и до вас.\r\n\r\nВам достался шаблон \"Волшебные числа\" из какого-то старого проекта. Там какие-то карточки с цифрами. Основная верстка уже есть, сейчас полетят задания:\r\n\r\n1. Сделай чтобы карточки шли в две строки!\r\n2. Расстояние добавь между карточками 10px!\r\n   1. Расстояние только между строками я имел ввиду!\r\n   2. Ой, то есть между столбцами!\r\n   3. В общем, верни опять чтобы общее расстояние было 10px.\r\n3. А теперь сделай карточки в три столбца!\r\n4. Дай третьему столбцу в два раза больше места, чем остальным!\r\n5. Пусть второй столбец будет не меньше 250px и не больше 500px!\r\n6. Первому столбцу ровно сотку пикселей дай!\r\n7. Сделай три столбца по 150px, но одной конструкцией!\r\n8. А теперь по бокам этих столбцов еще по одному добавь, чтобы занимали места сколько осталось!\r\n\r\nВсе удивлены как вы ловко обращаетесь с гридами и вы уже почти ощущаете тепло этих кружек со вкусным чаем, но тут приходит Вадик и говорит:\r\n\r\n9. А сможешь, чтобы столбцов было сколько влезет элементов, а не фиксированное количество? Причем в двух вариациях - чтобы когда элементов мало и переноса нет, т.е. строка всего одна, то:\r\n   1. Элементы занимали все доступное место в строке. \r\n   2. Элементы занимали 100px.\r\n   3. И не просто сделай, а объясни всем как это работает, раз уж все мы тут собрались.\r\n\r\n",
  "template": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Magic Numbers</title>\r\n  <style>\r\n    body {\r\n      font-family: Arial, sans-serif;\r\n      margin: 0;\r\n      padding: 20px;\r\n      background: #f5f5f5;\r\n    }\r\n    #container {\r\n      margin: 0 auto;\r\n      padding: 10px;\r\n      background-color: #FFEBDD;\r\n    }\r\n    .item {\r\n      padding: 15px;\r\n      border-radius: 8px;\r\n      text-align: center;\r\n      font-family: 'Courier New', monospace;\r\n      font-weight: bold;\r\n      background: #fff;\r\n      border: 1px solid black;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <div id=\"container\"></div>\r\n</body>\r\n<script>\r\n  function generateRandomNumber() {\r\n    const power = Math.floor(Math.random() * 9);\r\n    const min = Math.pow(10, power);\r\n    const max = Math.pow(10, power + 1) - 1;\r\n    \r\n    if (power === 0 && Math.random() < 0.3) {\r\n      return Math.floor(Math.random() * 9) + 1;\r\n    }\r\n    \r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  function formatNumber(num) {\r\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\r\n  }\r\n\r\n  const items = Array.from({ length: 9 }, (_, i) => {\r\n    const number = generateRandomNumber();\r\n    return {\r\n      id: i,\r\n      number: formatNumber(number),\r\n      length: number.toString().length\r\n    };\r\n  });\r\n\r\n  const grid = document.getElementById('container');\r\n  items.forEach(item => {\r\n    const el = document.createElement('div');\r\n    el.className = 'item';\r\n    el.textContent = item.number;\r\n    grid.appendChild(el);\r\n  });\r\n</script>\r\n</html>",
  "solution": "<style>\r\n  /* 1. Карточки в две строки */\r\n  #container {\r\n    display: grid;\r\n    grid-auto-flow: column;\r\n    grid-template-rows: auto auto;\r\n  }\r\n\r\n  /* 2. Расстояние 10px */\r\n  #container {\r\n    gap: 10px;\r\n    row-gap: 10px;\r\n    column-gap: 10px\r\n  }\r\n\r\n  /* 3. Карточки в три столбца */\r\n  #container {\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    grid-template-columns: auto auto auto;\r\n  }\r\n\r\n  /* 4. Третьему столбцу в два раза больше места */\r\n  #container {\r\n    display: grid;\r\n      grid-auto-flow: row;\r\n      grid-template-columns: auto auto 2fr;\r\n  }\r\n\r\n  /* 5. Второй столбец не меньше 250px и не больше 500px */\r\n  #container {\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    grid-template-columns: auto minmax(250px, 500px) auto;\r\n  }\r\n  \r\n  /* 6. Первый столбец ровно 100px */\r\n  #container {\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    grid-template-columns: 100px minmax(250px, 500px) auto;\r\n  }\r\n\r\n  /* 7. Три столбца по 150px одной конструкцией */\r\n  #container {\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    grid-template-columns: repeat(3, 150px);\r\n  }\r\n\r\n  /* 8. Три столбца по 150px одной конструкцией + два по бокам */\r\n  #container {\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    grid-template-columns: auto repeat(3, 150px) auto;\r\n  }\r\n\r\n  /* 9. Динамические столбцы */\r\n  #container {\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    /* 9.1. Все доступное место в строке */\r\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\r\n    /* 9.2. Элементы по 100px */\r\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\r\n  }\r\n</style>",
  "templateLang": ".html",
  "solutionLang": ".html",
  "categories": [
    "css",
    "grid"
  ],
  "tags": [
    "grid-auto-flow",
    "grid-template-columns",
    "grid-template-rows",
    "grid",
    "css"
  ]
}